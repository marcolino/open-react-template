/**
 * Rebuild i18n-imports file, if it does not contains already the same number of imports and translations
 */
'use strict';

const fs = require('fs');
const write = require('write');
const i18nParserConfig = require('../../config/i18next-parser.config.js');

module.exports = class I18nextPreWebpackPlugin {
  constructor(options) {
    if (!options) {
      throw new Error(`Please provide 'options' for the I18nextPreWebpackPlugin config`);
    }

    const missingOptions = [];

    if (options.path == null) missingOptions.push('path');

    if (missingOptions.length)
      throw new Error(
        `Please provide the following option${
          missingOptions.length > 1 ? 's' : ''
        } in the I18nextPreWebpackPlugin config: ${missingOptions.join(', ')}`
      )
    ;

    this.options = options;
  }

  // check if file already contains all locales
  _checkFile({ path }, compilation) {
    const result = fs.readFileSync(path, 'utf8');
    let locales = '';
    for (var i in i18nParserConfig.locales) {
      const locale = i18nParserConfig.locales[i];
      const re1 = new RegExp('import ' + locale + ' from ', 'g');
      const re2 = new RegExp(locale + ': { translation: ' + locale + ' },', 'g');
      if (!result.match(re1) || !result.match(re2)) {
        return false;
      }
      locales += (locales ? '|' : '') + locale;
    }

    // check if file does not contain other locales
    const re3 = new RegExp('import (?!('+locales+')).. from ', 'gm'); // a negative lookahead
    if (result.match(re3)) { // re3 matched, some other (old) locale found, returning false, to rebuild output file
      return false;
    }

    return true;
  }

  _createFile({ path }, compilation) {
    let content = '';

    content += `\
// Dynamically generated by I18nextPreWebpackPlugin, please do not touch.
// If you want to add or remove a language, simply change languages array in i18next-parser config file,
// then run \`yarn build:translations-parse\` to create translations tree and,
// if you want auto-translation, run \`yarn build:auto-translate\`

// the imports
`;
    //console.log('locales:', i18nParserConfig.locales, typeof i18nParserConfig.locales, i18nParserConfig.locales[0]);
    for (var i in i18nParserConfig.locales) {
      var locale = i18nParserConfig.locales[i]
      content += `import ${locale} from './locales/${locale}/translation.json';\n`;
    }

    content += `
// the translations
export default {
`;

    for (var i in i18nParserConfig.locales) {
      var locale = i18nParserConfig.locales[i]
      content += `  ${locale}: { translation: ${locale} },\n`;
    }

    content += `};
`;

    write.sync(path, content);
  }

  apply(compiler) {
    compiler.hooks.emit.tapPromise('I18nextPreWebpackPlugin', async compilation => {
      if (!this._checkFile(this.options, compilation)) { // create file only if file does not already contains all locales
        this._createFile(this.options, compilation);
      }
    });
  }
};